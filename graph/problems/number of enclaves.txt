problem link::::https://www.geeksforgeeks.org/problems/number-of-enclaves/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=number-of-enclaves


//solution


int numberOfEnclaves(vector<vector<int>> &grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>>visited(n,vector<int>(m,0));
        queue<pair<int,int>>q;
        //for the first and last row
        for(int i=0;i<m;i++){
            //first row
            if(grid[0][i]==1){
                visited[0][i]=1;
                q.push(make_pair(0,i));
            }
            //last row
            if(grid[n-1][i]==1){
                visited[n-1][i]=1;
                q.push(make_pair(n-1,i));
            }
        }
        //for the first and last column
        for(int i=0;i<n;i++){
            if(grid[i][0]==1){
                visited[i][0]=1;
                q.push(make_pair(i,0));
            }
            if(grid[i][m-1]==1){
                visited[i][m-1]=1;
                q.push(make_pair(i,m-1));
            }
        }
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        while(!q.empty()){
            pair<int,int>temp=q.front();
            q.pop();
            int r=temp.first;
            int c=temp.second;
            for(int i=0;i<4;i++){
                int newrow=r+delrow[i];
                int newcol=c+delcol[i];
                if(newrow>=0 && newrow<n && newcol>=0 && newcol<m && !visited[newrow][newcol]
                && grid[newrow][newcol]==1){
                    q.push(make_pair(newrow,newcol));
                    visited[newrow][newcol]=1;
                }
            }
        }
        int ctr=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    if(!visited[i][j]){
                        ctr++;
                    }
                }
            }
        }
        return ctr;
    }