#include<bits/stdc++.h>
using namespace std;
template<typename T>
class Graph{
    public:
    unordered_map<T,vector<T>>adj;
    void addEdge(T u,T v,bool direction){
        adj[u].push_back(v);
        if(direction==0){
            adj[v].push_back(u);
        }
    }
    void printGraph(){
        for(auto node:adj){
            cout<<node.first<<"->";
            for(auto neighbour:node.second){
                cout<<neighbour<<" ";
            }
            cout<<endl;
        }
    }
    void bfs(unordered_map<int,bool>&visited){
        queue<int>q;
        q.push(0);
        visited[0]=true;
        while(!q.empty()){
            int temp=q.front();
            cout<<temp<<" ";
            q.pop();
            for(auto it:adj[temp]){
                if(!visited[it]){
                    q.push(it);
                    visited[it]=1;
                }
            }
        }
    }
    void dfs(int src, unordered_map<int, bool>& visited) {
    cout << src << ", ";
    visited[src] = true;

    for(auto neighbour: adj[src]) {
      if(!visited[neighbour] ) {
        dfs(neighbour, visited);
      }
    }
  }
};
int main(){
    Graph<int>g;
    g.addEdge(0,1,0);
    g.addEdge(0,3,0);
    g.printGraph();
    return 0;
}