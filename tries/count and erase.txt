problem link:::::https://www.codingninjas.com/studio/problems/implement-trie_1387095?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_tries_videos&leftPanelTabValue=PROBLEM



//solution

#include <bits/stdc++.h> 

struct Node{
    Node*children[26];
    int endofword;
    int start;
    Node(){
        for(int i=0;i<26;i++){
            this->children[i]=NULL;
        }
        this->endofword=0;
        this->start=0;
    }
};
class Trie{
private:Node *root;
    public:

    Trie(){
       root=new Node();
    }

    void insert(string &word){
        struct Node*temp=root;
        for(int i=0;i<word.length();i++){
            char ch=word[i];
            int idx=ch-'a';
            if(temp->children[idx]==NULL){
                temp->children[idx]=new Node();
            }
            temp=temp->children[idx];
            temp->start++;
        }
        temp->endofword++;
    }

    int countWordsEqualTo(string &word){
        struct Node*temp=root;
        for(int i=0;i<word.length();i++){
            char ch=word[i];
            int idx=ch-'a';
            if(temp->children[idx]==NULL){
                return 0;
            }
            temp=temp->children[idx];
        }
        if(temp!=NULL){
            return temp->endofword;
        }
        return 0;
    }

    int countWordsStartingWith(string &word){
        struct Node*temp=root;
        for(int i=0;i<word.length();i++){
            char ch=word[i];
            int idx=ch-'a';
            if(temp->children[idx]==NULL){
                return 0;
            }
            temp=temp->children[idx];
        }
        if(temp!=NULL){
            return temp->start;
        }
        return 0;
    }

    void erase(string &word){
        struct Node*temp=root;
        for(int i=0;i<word.length();i++){
            char ch=word[i];
            int idx=ch-'a';
            if(temp->children[idx]!=NULL){
                temp=temp->children[idx];
                temp->start--;
            }
        }
        if(temp!=NULL){
            temp->endofword--;
        }
    }
};
