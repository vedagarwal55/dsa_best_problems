problem link::::https://www.codingninjas.com/studio/problems/implement-trie_631356?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_tries_videos&leftPanelTabValue=SUBMISSION


//solution


struct Node{
    Node *links[26];
    bool isendofword;
    Node(){
        for(int i=0;i<26;i++){
            this->links[i]=NULL;
        }
        this->isendofword=false;
    }
};

class Trie {
private:Node *root;
public:

    /** Initialize your data structure here. */

    Trie() {
        root=new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        struct Node*temp=root;
        for(int i=0;i<word.length();i++){
            //word exist or not
            char ch=word[i];
            int idx=ch-'a';
            if(temp->links[idx]!=NULL){
                temp=temp->links[idx];
            }
            else{
                temp->links[idx]=new Node();
                temp=temp->links[idx];
            }
        }
        temp->isendofword=true;
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        struct Node*temp=root;
        for(int i=0;i<word.length();i++){
            char ch=word[i];
            int idx=ch-'a';
            if(temp->links[idx]==NULL){
                return false;
            }
            temp=temp->links[idx];
        }
        if(temp->isendofword==true){
            return true;
        }
        return false;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string word) {
        struct Node*temp=root;
        for(int i=0;i<word.length();i++){
            char ch=word[i];
            int idx=ch-'a';
            if(temp->links[idx]==NULL){
                return false;
            }
            temp=temp->links[idx];
        }
        return true;
    }
};