#include<bits/stdc++.h>
using namespace std;
class TrieNode{
  public:
  char ch;
  TrieNode *children[26];
  bool isTerminal;
  TrieNode(char ch){
    this->ch=ch;
    for(int i=0;i<26;i++){
      this->children[i]=NULL;
    }
    this->isTerminal=false;
  }
};
void insertWord(TrieNode *root,string word){
  //base case
  if(word.length()==0){
    root->isTerminal=true;
    return;
  }
  TrieNode*child;
  char ch=word[0];
  int idx=ch-'a';
  //check that is present in the root or not
  if(root->children[idx]!=NULL){
    //that means it is present
    child=root->children[idx];
  }
  else{
    //it means it is absent
    //first create new node
    child=new TrieNode(ch);
    root->children[idx]=child;
  }
  //solve it recursively
  insertWord(child,word.substr(1));
}
bool searchWord(TrieNode *root,string word){
  //base case
  if(word.length()==0){
    return root->isTerminal;
  }
  char ch=word[0];
  int idx=ch-'a';
  TrieNode*child;
  if(root->children[idx]!=NULL){
    //presnt hai
    child=root->children[idx];
  }
  else{
    //not present
    return false;
  }
  //recursive call
  return searchWord(child,word.substr(1));
}
int main(){
  TrieNode *root=new TrieNode('.');
  insertWord(root,"ved");
  insertWord(root,"agarwal");
  insertWord(root,"coderdost");
  cout<<searchWord(root,"coderdost");
  return 0;
}