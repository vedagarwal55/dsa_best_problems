/*
problem link::::https://leetcode.com/problems/fibonacci-number/submissions/
*/
//solution



class Solution {
    private:
    int ans(int n,vector<int>&dp){
        if(n==0 || n==1){
            return n;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        return dp[n]=ans(n-1,dp)+ans(n-2,dp);
    }
    int bottomup(int n){
        vector<int>dp(n+1,-1);
        if(n==0){
            return 0;
        }
        if(n==1){
            return 1;
        }
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
    int space(int n){
        int prev1=0;
        int prev2=1;
        if(n==0|| n==1){
            return n;
        }
        int ans;
        for(int i=2;i<=n;i++){
            ans=prev1+prev2;
            prev1=prev2;
            prev2=ans;
        }
        return ans;
    }
public:
    int fib(int n) {
        //at first using recusion
        // if(n==0 || n==1){
        //     return n;
        // }
        // return fib(n-1)+fib(n-2);
        //this is using memoization
        // vector<int>dp(n+1,-1);
        // return ans(n,dp);
        // return bottomup(n);
        return space(n);
    }
};